buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
        maven {
            name = 'sonatype-nexus'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

defaultTasks 'licenseFormat', 'build'

apply plugin: 'forge'
apply plugin: 'license'
apply plugin: 'maven'

group = 'com.almuradev'
archivesBaseName = 'guide'

ext.minecraftVersion = '1.7.10'
ext.forgeVersion = '10.13.2.1291'
version = minecraftVersion + '-' + forgeVersion.substring(forgeVersion.size() - 4) + '-SNAPSHOT'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
    maven {
        name = 'sponge-public'
        url = 'http://repo.spongepowered.org/maven/'
    }
}

minecraft {
    version = project.ext.minecraftVersion + '-' + project.ext.forgeVersion
    runDir = "run/"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile 'com.almuradev:almurasdk:1.7.10-1291-SNAPSHOT'
}

processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    from 'LICENSE.txt'
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.url = project.url
    ext.year = project.inceptionYear
    sourceSets = project.sourceSets
    header file('HEADER.txt')
    ignoreFailures false
    strictCheck true
    includes (["**/*.java"])
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

compileJava {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing'
    ]
    options.deprecation = true
    options.encoding = 'utf8'
}

def manifestEntries = [
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version,
        "Implementation-Vendor": url
]

jar {
    manifest.mainAttributes(manifestEntries)

    classifier = 'release'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}


task sourceJar(type: Jar, dependsOn: sourceMainJava) {
    from "build/sources/java"
    from "build/resources/main/java"
    classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = "javadoc"
}

artifacts {
    archives sourceJar
    archives javadocJar
}
